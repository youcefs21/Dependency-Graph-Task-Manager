// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Node {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal        String       @default("insert goal here")
  archive     Boolean      @default(false)
  x           Int          @default(0)
  y           Int          @default(0)
  description String?      @db.Text
  size        Float        @default(1)
  due         String?
  priority    String       @default("normal")
  out_edges   Edge[]       @relation("outgoing")
  in_edges    Edge[]       @relation("incoming")
  nodeLayers  NodeLayers[]
}

model Edge {
  id       String @id @default(cuid())
  node1_id String
  node2_id String
  node1    Node   @relation("outgoing", fields: [node1_id], references: [id], onDelete: Cascade)
  node2    Node   @relation("incoming", fields: [node2_id], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [node1_id, node2_id])
}

model Graph {
  id              String  @id @default(cuid())
  userId          String
  scale           Float   @default(20)
  x               Float   @default(0)
  y               Float   @default(0)
  name            String  @default("Graph")
  completeLayerId String? @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  layers          Layer[]
}

model Layer {
  id      String       @id @default(cuid())
  name    String
  graphId String
  graph   Graph        @relation(fields: [graphId], references: [id], onDelete: Cascade)
  visible Boolean      @default(false)
  nodeIds NodeLayers[]
}

model NodeLayers {
  nodeId  String
  layerId String
  node    Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  layer   Layer  @relation(fields: [layerId], references: [id], onDelete: Cascade)

  @@unique(fields: [nodeId, layerId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  graphs        Graph[]
  nodes         Node[]
  edges         Edge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
